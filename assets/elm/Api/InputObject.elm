-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.InputObject exposing (..)


import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Api.Object
import Api.Interface
import Api.Union
import Api.Scalar
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)




buildAuthenticateUserInput : AuthenticateUserInputRequiredFields -> AuthenticateUserInput
buildAuthenticateUserInput required =

    { email = required.email, password = required.password }

type alias AuthenticateUserInputRequiredFields =
    { email : String, password : String }



{-| Type for the AuthenticateUserInput input object.
-}
type alias AuthenticateUserInput =
    { email : String, password : String }
    

{-| Encode a AuthenticateUserInput into a value that can be used as an argument.
-}
encodeAuthenticateUserInput : AuthenticateUserInput -> Value
encodeAuthenticateUserInput input =
    Encode.maybeObject
        [ ( "email", (Encode.string)  input.email |> Just ), ( "password", (Encode.string)  input.password |> Just ) ]


buildCreateBoardInput : CreateBoardInputRequiredFields -> CreateBoardInput
buildCreateBoardInput required =

    { name = required.name }

type alias CreateBoardInputRequiredFields =
    { name : String }



{-| Type for the CreateBoardInput input object.
-}
type alias CreateBoardInput =
    { name : String }
    

{-| Encode a CreateBoardInput into a value that can be used as an argument.
-}
encodeCreateBoardInput : CreateBoardInput -> Value
encodeCreateBoardInput input =
    Encode.maybeObject
        [ ( "name", (Encode.string)  input.name |> Just ) ]


buildCreateCardInput : CreateCardInputRequiredFields -> (CreateCardInputOptionalFields -> CreateCardInputOptionalFields) -> CreateCardInput
buildCreateCardInput required fillOptionals =

    let
        optionals =
            
            fillOptionals
                { position = Absent }
    in
    { columnId = required.columnId, position = optionals.position, title = required.title }

type alias CreateCardInputRequiredFields =
    { columnId : Api.Scalar.Id, title : String }
type alias CreateCardInputOptionalFields =
    { position : (OptionalArgument Float) }


{-| Type for the CreateCardInput input object.
-}
type alias CreateCardInput =
    { columnId : Api.Scalar.Id, position : (OptionalArgument Float), title : String }
    

{-| Encode a CreateCardInput into a value that can be used as an argument.
-}
encodeCreateCardInput : CreateCardInput -> Value
encodeCreateCardInput input =
    Encode.maybeObject
        [ ( "columnId", ((\(Api.Scalar.Id raw) -> Encode.string raw))  input.columnId |> Just ), ( "position", (Encode.float)  |> Encode.optional input.position ), ( "title", (Encode.string)  input.title |> Just ) ]


buildCreateColumnInput : CreateColumnInputRequiredFields -> (CreateColumnInputOptionalFields -> CreateColumnInputOptionalFields) -> CreateColumnInput
buildCreateColumnInput required fillOptionals =

    let
        optionals =
            
            fillOptionals
                { position = Absent }
    in
    { boardId = required.boardId, name = required.name, position = optionals.position }

type alias CreateColumnInputRequiredFields =
    { boardId : Api.Scalar.Id, name : String }
type alias CreateColumnInputOptionalFields =
    { position : (OptionalArgument Float) }


{-| Type for the CreateColumnInput input object.
-}
type alias CreateColumnInput =
    { boardId : Api.Scalar.Id, name : String, position : (OptionalArgument Float) }
    

{-| Encode a CreateColumnInput into a value that can be used as an argument.
-}
encodeCreateColumnInput : CreateColumnInput -> Value
encodeCreateColumnInput input =
    Encode.maybeObject
        [ ( "boardId", ((\(Api.Scalar.Id raw) -> Encode.string raw))  input.boardId |> Just ), ( "name", (Encode.string)  input.name |> Just ), ( "position", (Encode.float)  |> Encode.optional input.position ) ]


buildRegisterUserInput : RegisterUserInputRequiredFields -> RegisterUserInput
buildRegisterUserInput required =

    { email = required.email, password = required.password }

type alias RegisterUserInputRequiredFields =
    { email : String, password : String }



{-| Type for the RegisterUserInput input object.
-}
type alias RegisterUserInput =
    { email : String, password : String }
    

{-| Encode a RegisterUserInput into a value that can be used as an argument.
-}
encodeRegisterUserInput : RegisterUserInput -> Value
encodeRegisterUserInput input =
    Encode.maybeObject
        [ ( "email", (Encode.string)  input.email |> Just ), ( "password", (Encode.string)  input.password |> Just ) ]


buildUpdateColumnPositionInput : UpdateColumnPositionInputRequiredFields -> UpdateColumnPositionInput
buildUpdateColumnPositionInput required =

    { boardId = required.boardId, id = required.id, position = required.position }

type alias UpdateColumnPositionInputRequiredFields =
    { boardId : Api.Scalar.Id, id : Api.Scalar.Id, position : Float }



{-| Type for the UpdateColumnPositionInput input object.
-}
type alias UpdateColumnPositionInput =
    { boardId : Api.Scalar.Id, id : Api.Scalar.Id, position : Float }
    

{-| Encode a UpdateColumnPositionInput into a value that can be used as an argument.
-}
encodeUpdateColumnPositionInput : UpdateColumnPositionInput -> Value
encodeUpdateColumnPositionInput input =
    Encode.maybeObject
        [ ( "boardId", ((\(Api.Scalar.Id raw) -> Encode.string raw))  input.boardId |> Just ), ( "id", ((\(Api.Scalar.Id raw) -> Encode.string raw))  input.id |> Just ), ( "position", (Encode.float)  input.position |> Just ) ]
