-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Api.Object
import Api.Interface
import Api.Union
import Api.Scalar
import Api.InputObject
import Graphql.Internal.Builder.Object as Object
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Json.Decode as Decode exposing (Decoder)
import Graphql.Internal.Encode as Encode exposing (Value)



{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor
type alias BoardRequiredArguments = { hashid : String }

{-| Lookups a board by hashid.
-}
board : BoardRequiredArguments -> SelectionSet decodesTo Api.Object.Board -> Field (Maybe decodesTo) RootQuery
board requiredArgs object_ =
      Object.selectionField "board" [ Argument.required "hashid" requiredArgs.hashid (Encode.string) ] (object_) (identity >> Decode.nullable)


{-| Lists boards for authorized user
-}
boards : SelectionSet decodesTo Api.Object.Board -> Field (Maybe (List (Maybe decodesTo))) RootQuery
boards object_ =
      Object.selectionField "boards" [] (object_) (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias CardsRequiredArguments = { hashid : String }

{-| Lists cards for given board for authorized user
-}
cards : CardsRequiredArguments -> SelectionSet decodesTo Api.Object.Card -> Field (Maybe (List (Maybe decodesTo))) RootQuery
cards requiredArgs object_ =
      Object.selectionField "cards" [ Argument.required "hashid" requiredArgs.hashid (Encode.string) ] (object_) (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


me : SelectionSet decodesTo Api.Object.User -> Field (Maybe decodesTo) RootQuery
me object_ =
      Object.selectionField "me" [] (object_) (identity >> Decode.nullable)


userLogin : SelectionSet decodesTo Api.Object.User -> Field (Maybe decodesTo) RootQuery
userLogin object_ =
      Object.selectionField "userLogin" [] (object_) (identity >> Decode.nullable)
